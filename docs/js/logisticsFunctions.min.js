const ciMain=data=>{let query=data.query;query.fields="id,tracking_number,requested_route,consolidation_id,status,location",console.dir(query),$("#lt_results").html($("<div>",{class:"lt-loader"})),$.getJSON("/consignments/",query).done(json=>{1===data.ncr?filterProcessed(json,query):ciOutput(json)}).fail((o,s,e)=>{console.error(`Ooops, CI GET Error: ${s}\n${e}`),$("#lt_results").html($("<pre>").text(o))})},filterProcessed=(json,query)=>{query.fields="id,trunk_container.barcode",delete query.status,$.getJSON("/consignments/",query).done(processedCons=>{let ex=[];processedCons.forEach(p=>{p.trunk_container.length>0&&ex.push(p.id)});let unprocessedCons=json.filter(c=>!ex.includes(c.id));ciOutput(unprocessedCons)})},ciOutput=cons=>{let out_html=$("<table>",{id:"ci_results"}),results=[],fields=[];if(cons.length>0){let head=$("<tr>",{class:"ci-row ci-head"});$.each(Object.keys(cons[0]),(_i,k)=>{head.append($("<td>").text(k)),fields.push(k)}),out_html.append(head),$.each(cons,(_i,o)=>{let row=$("<tr>",{class:"ci-row"}),line=[];$.each(o,(k,v)=>{$("<td>",{class:"ci-"+k}).text(v).appendTo(row),line.push(v)}),out_html.append(row),results.push(line)})}else out_html.append($("<tr>",{class:"sc-row lt-error"}).html("<td>Query returned no results</td>"));$("#lt_results").html(out_html),results.length&&(results.unshift(fields),$("<div>",{class:"download-link"}).text("Download these Results").on("click",()=>downloadCsv(results,"ci_output")).prependTo($("#lt_results")))},acMain=async data=>{$("#lt_results").html($("<div>",{class:"lt-loader"}));let containers=[];var current;for(const bc of data)if(null===bc.match(/^PCS[0-9]{9}$/)){let t=bc.match(/^CSLC[0-9]{8}$/)?"location":"trunk";containers.push({id:bc,type:t,records:[]}),current=bc}else{let idx=containers.findIndex(e=>e.id===current);containers[idx].records.push(bc)}if(0===containers.length)$("#lt_results").html($("<div>",{class:"lt-error"}).text("Unable to build list of containers"));else{$("#lt_results").html($("<div>",{id:"ac_results"}));for(const o of containers){let row=$("<div>",{id:o.id,class:"ac-row"}).append($("<div>",{class:"ac-col-l"}).text(o.id)).append($("<div>",{class:"ac-col-r"}).append($("<ul>",{class:"ac-list"}).append($("<li>",{class:"ac-summary"}))));$("#ac_results").append(row);let errors=0,added=0;for(const r of o.records){let scanUri=`/${o.type}containers/${o.id}/scan/${r}`;await fetch(scanUri,{method:"POST"}).then(res=>204!==res.status?(errors++,res.json()):(added++,!1)).then(result=>{$("#"+o.id+" li.ac-summary").text("Records Added: "+added+", Errors: "+errors),result&&$("#"+o.id+" ul.ac-list").append($("<li>",{class:"sc-error"}).text(r+" - "+result.message))})}}}},downloadCsv=(data,fileName="download")=>{out=[];for(const i of data)out.push(i.join(",")+"\n");let a=document.createElement("a"),blob=new Blob(out,{type:"text/csv"});a.href=window.URL.createObjectURL(blob),a.download=`${fileName}_${Date.now()}.csv`,a.click(),window.URL.revokeObjectURL(a.href)},lpMain=async data=>{$("#lt_results").html($("<div>",{id:"lp_results"}).append($("<div>",{id:"lp_head",class:"lp-row"}).append($("<div>").text("Barcode")).append($("<div>").text("Route")).append($("<div>").text("Stop Id"))));let csv=[];for(const tn of data){let j=await fetch("/consignment/scan/reconcile/"+tn).then(r=>r.json()),row=$("<div>",{id:`tn_${tn}`,class:"lp-row"});j.id?j.requested_route?(row.append($("<div>").text(tn)).append($("<div>").text(j.requested_route)).append($("<div>").text(j.consolidation_id)),csv.push([tn,j.requested_route,j.consolidation_id])):(row.addClass("lp-error").text(`${tn} not routed`),csv.push([tn,0,"Consignment Not Routed"])):(row.addClass("lp-error").text(`${tn} not manifested`),csv.push([tn,0,"Consignment Not Manifested"])),$("#lp_results").append(row)}csv.sort((a,b)=>a[1]-b[1]||a[2].localeCompare(b[2])),csv.unshift(["Barcode","Route","Stop Id"]),downloadCsv(csv,"LabelPacks")},scMain=(source,dest)=>{$("#lt_results").html($("<div>",{class:"lt-loader"}));let data={count:5e3,fields:"tracking_number",q:"trunk_container:"+source};$.getJSON("/consignments/",data).done(cons=>{0===cons.length?$("#lt_results").html($("<div>",{class:"lt-error"}).text("No records returned for "+source)):($("#lt_results").html($("<div>",{id:"sc_results"})),$.each(cons,(_i,c)=>{let jqxhr=$.post("/trunkcontainers/"+dest+"/scan/"+c.tracking_number);jqxhr.always(()=>{let row=$("<div>",{class:"sc-row"});row.append($("<div>",{class:"sc-col-l"}).text(c.tracking_number));let mesg="Record moved to "+dest,cell=$("<div>",{class:"sc-col-r"});204!==jqxhr.status&&(mesg=jqxhr.status+": Error adding record to "+dest,cell.addClass("sc-error")),cell.text(mesg),row.append(cell),$("#sc_results").append(row)})}))})},bpMain=async bpData=>{let regex=/^(PCS[0-9]{9}|CTL[0-9]{8})$/,data=bpData.data.toUpperCase().trim().split("\n"),did=await getDriverId(bpData.key);if(!did)return alert(`Unable to find unique driver_id for ${courier}`),!1;if(!validateBarcodes(data,regex))return alert("Invalid barcode data, please check input and try again"),!1;const qs=new URLSearchParams({fields:"tracking_number",count:data.length,tracking_number:data.join(",")});let cdata=await fetch(`/consignments/?${qs}`).then(r=>r.json());for(i in cdata){const id=cdata[i].id,body={id:id,pod_name:bpData.name,driver:did,delivery_time:bpData.time,delivery_date:bpData.date},result=await fetch(`/consignment/${id}/delivered`,{body:JSON.stringify(body),method:"POST"});let out=result.json();$("#lt_results").append($("<div>",{text:`${cdata[i].tracking_number}: ${out}`}))}return!0},validateBarcodes=(arr,regex)=>{let count=0;return $.each(arr,(_i,bc)=>{null===bc.match(regex)&&count++}),!(count>0)},getDriverId=async key=>{const result=await fetch(`/drivers/?enabled=true&query=${key}`).then(r=>r.json()).then(j=>1==j.length&&j[0]);return result},date=new Date,today=date.toJSON().substring(0,10),sorter=(a,b)=>a.consolidation_id>b.consolidation_id?1:-1,timer=ms=>new Promise(res=>setTimeout(res,ms)),getClientLocations=async config=>{const query=new URLSearchParams({limit:1e4,open:!0,order:"consolidation_id",service_centre:config.service_centre}),sites=await fetch("/client/11270/locations?"+query).then(r=>r.json()),GPs=sites.filter(l=>"GP"===l.address_type&&!0===l.fixed);return GPs},getLiveGroups=async config=>{const url=`/route/current/depot/${config.service_centre}`,groups=await fetch(url).then(r=>r.json());return filterGroups(groups)},filterGroups=groups=>{let filteredGroups=[];for(const[key,group]of Object.entries(groups)){const da=key.split("-");for(const[id,data]of Object.entries(group)){const re=/^Capita /,notre=/Urgent/;if(data.name.match(re)&&!data.name.match(notre)){const groupObject={rgid:id,date:key,shortDate:da[2]+"-"+da[1]};filteredGroups.push(groupObject)}}}return filteredGroups},getGroupRoutes=async group=>{const search=new URLSearchParams({date:group.date,routeGroupId:group.rgid}),groupRoutes=await fetch("/routes/?"+search).then(r=>r.json());for(let r of groupRoutes)r.shortDate=group.shortDate;return groupRoutes},getOpenContainers=async route=>{const query=new URLSearchParams({fields:"location_containers"}),location_containers=await fetch(`/routes/${route.key}?${query}`).then(r=>r.json()).then(j=>j.location_containers.sort(sorter));return location_containers},getMissingContainers=route=>{const rl=route.locations,rc=route.location_containers,missing_containers=[];for(m of rl.filter(l=>!rc.some(c=>l.consolidation_id===c.consolidation_id)))missing_containers.push(m.consolidation_id);return missing_containers},getRoutes=async config=>{const locations=await getClientLocations(config);let groups=await getLiveGroups(config);const allRoutes=[];for(let g of groups)for(r of(g.routes=await getGroupRoutes(g),g.routes))r.shortDate=g.shortDate,r.locations=locations.filter(l=>l.route_planned.code===r.route_planned_code),r.location_containers=await getOpenContainers(r),r.missing_containers=getMissingContainers(r),allRoutes.push(r);return allRoutes.sort((a,b)=>a.date+a.route_planned_code>b.date+b.route_planned_code?1:-1),allRoutes},genNewContainers=async req=>{const newContainers=await fetch("/locationcontainers/",req).then(r=>r.json()).then(j=>{data=[];const b=j.barcode.split(","),c=j.consolidationId.split(",");for(;b.length>0;)data.push({barcode:b.shift(),consolidation_id:c.shift()});return data});return newContainers},addBarcodes=async route=>{$(`#${route.key}`).text("Creating containers...");let s=route.containers.map(x=>x.to_ci);const req={body:JSON.stringify({route:route.key,open:!0,consolidation_id:s.join(",")}),method:"POST"},nbc=await genNewContainers(req);for(c of nbc){const idx=route.containers.map(o=>o.to_ci).indexOf(c.consolidation_id);route.containers[idx].container_id=nbc[idx].barcode}},printLabels=async(data,config)=>{let printer=config.container_printer_name;config.local_printing&&(printer=config.container_local_printer_name);let query,printBody={url:"https://labels.citysprint.co.uk/label/capita-location-container?"+new URLSearchParams({printer:printer}),content:data},printReq={headers:{"Content-Type":"application/json;charset=UTF-8"},referrer:location.origin+"/route/",body:JSON.stringify(printBody),method:"POST",mode:"cors",credentials:"include"};const response=await fetch("/crossOrigin",printReq);return response},getData=async config=>{const allRoutes=await getRoutes(config),routes=allRoutes.filter(e=>e.missing_containers.length>0),nc=[];for(r of routes){const rData={date:r.date,key:r.key,rpc:r.route_planned_code,containers:[]};for(c of r.missing_containers){const idx=r.locations.map(o=>o.consolidation_id).indexOf(c),practice=r.locations[idx];let data={date:r.shortDate,to_ci:c,practice_name:practice.name,postcode:practice.postcode,route:r.route_planned_code};rData.containers.push(data)}nc.push(rData)}return nc},gpMain=async(data,config)=>{for(const r of data){await addBarcodes(r),console.log(r);let response=await printLabels(r.containers,config);response.ok?$(`#${r.key}`).text("Labels sent to print"):$(`#${r.key}`).text(`Print failed: ${response.statusText}`),await timer(2e3)}},populateGPs=async config=>{const groups={},gpGroups=[];$("#gp_form").remove(),$("#gp_tab").append($("<div>",{id:"gp_tmp",class:"lt-loader"}));const routes=await getData(config);if(!routes)return $("#gp_tmp").remove(),void $("#lt_results").append($("<h3>",{text:"No live routes found",class:"gp-error"}));for(const r of routes)groups[r.date]?groups[r.date].push(r):groups[r.date]=[r];for(const[date,rArray]of Object.entries(groups)){let gpGroup=$("<div>",{class:"gp-group",id:date});for(const r of rArray)gpGroup.append($("<div>",{class:"gp-row hidden"}).append($("<input>",{type:"checkbox",class:"gp-cbx"}).data("route",r)).append($("<label>",{text:`${r.rpc} - ${r.containers.length} containers`,class:"gp-lbl"})).append($("<span>",{id:r.key,class:"gp-res"})));gpGroup.prepend($("<div>",{class:"gp-route"}).append($("<input>",{type:"checkbox",class:"gp-cbx"}).change((function(){$("div.gp-row > input[type=checkbox]",gpGroup).prop("checked",$(this).prop("checked"))}))).append($("<label>",{class:"gp-lbl"}).append($("<span>",{text:date})).append($("<i>",{class:"ace-icon fa fa-caret-down"})).click(()=>$(".gp-row",gpGroup).toggleClass("hidden")))),gpGroups.push(gpGroup)}if(gpGroups.length){let gpForm=$("<div>",{id:"gp_form"}).append($("<div>",{id:"gp_select"}).append(gpGroups)).append($("<button>",{class:"lt-button",id:"gp_all",text:"Toggle All"}).click(()=>{$("input.gp-cbx").each((_,e)=>$(e).prop("checked",!$(e).prop("checked")))})).append($("<button>",{class:"lt-button",id:"gp_btn",text:"Print Selected"}).click(()=>{let gpData=[];$(".gp-row > .gp-cbx:checked").each((i,e)=>{gpData.push($(e).data("route"))}),gpMain(gpData,config)}));$("#gp_tmp").replaceWith(gpForm)}else $("#gp_tmp").remove(),$("#lt_results").append($("<h3>",{text:"No routes require containers",class:"gp-error"}))};